// Package legacyclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package influxdbv2

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AuthorizationStatus.
const (
	AuthorizationStatusActive   AuthorizationStatus = "active"
	AuthorizationStatusInactive AuthorizationStatus = "inactive"
)

// Defines values for AuthorizationUpdateRequestStatus.
const (
	AuthorizationUpdateRequestStatusActive   AuthorizationUpdateRequestStatus = "active"
	AuthorizationUpdateRequestStatusInactive AuthorizationUpdateRequestStatus = "inactive"
)

// Defines values for ErrorCode.
const (
	Conflict             ErrorCode = "conflict"
	EmptyValue           ErrorCode = "empty value"
	Forbidden            ErrorCode = "forbidden"
	InternalError        ErrorCode = "internal error"
	Invalid              ErrorCode = "invalid"
	MethodNotAllowed     ErrorCode = "method not allowed"
	NotFound             ErrorCode = "not found"
	NotImplemented       ErrorCode = "not implemented"
	RequestTooLarge      ErrorCode = "request too large"
	TooManyRequests      ErrorCode = "too many requests"
	Unauthorized         ErrorCode = "unauthorized"
	Unavailable          ErrorCode = "unavailable"
	UnprocessableEntity  ErrorCode = "unprocessable entity"
	UnsupportedMediaType ErrorCode = "unsupported media type"
)

// Defines values for FieldType.
const (
	FieldTypeField    FieldType = "field"
	FieldTypeFunc     FieldType = "func"
	FieldTypeInteger  FieldType = "integer"
	FieldTypeNumber   FieldType = "number"
	FieldTypeRegex    FieldType = "regex"
	FieldTypeWildcard FieldType = "wildcard"
)

// Defines values for HealthCheckStatus.
const (
	Fail HealthCheckStatus = "fail"
	Pass HealthCheckStatus = "pass"
)

// Defines values for LegacyAuthorizationPostRequestStatus.
const (
	Active   LegacyAuthorizationPostRequestStatus = "active"
	Inactive LegacyAuthorizationPostRequestStatus = "inactive"
)

// Defines values for PermissionAction.
const (
	Read  PermissionAction = "read"
	Write PermissionAction = "write"
)

// Defines values for ResourceType.
const (
	Annotations           ResourceType = "annotations"
	Authorizations        ResourceType = "authorizations"
	Buckets               ResourceType = "buckets"
	Checks                ResourceType = "checks"
	Dashboards            ResourceType = "dashboards"
	Dbrp                  ResourceType = "dbrp"
	Documents             ResourceType = "documents"
	Flows                 ResourceType = "flows"
	Functions             ResourceType = "functions"
	Instance              ResourceType = "instance"
	Labels                ResourceType = "labels"
	Notebooks             ResourceType = "notebooks"
	NotificationEndpoints ResourceType = "notificationEndpoints"
	NotificationRules     ResourceType = "notificationRules"
	Orgs                  ResourceType = "orgs"
	Remotes               ResourceType = "remotes"
	Replications          ResourceType = "replications"
	Scrapers              ResourceType = "scrapers"
	Secrets               ResourceType = "secrets"
	Sources               ResourceType = "sources"
	Subscriptions         ResourceType = "subscriptions"
	Tasks                 ResourceType = "tasks"
	Telegrafs             ResourceType = "telegrafs"
	Users                 ResourceType = "users"
	Variables             ResourceType = "variables"
	Views                 ResourceType = "views"
)

// Authorization defines model for Authorization.
type Authorization struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Description A description of the token.
	Description *string `json:"description,omitempty"`

	// Id The authorization ID.
	Id    *string `json:"id,omitempty"`
	Links *struct {
		// Self URI of resource.
		Self *Link `json:"self,omitempty"`

		// User URI of resource.
		User *Link `json:"user,omitempty"`
	} `json:"links,omitempty"`

	// Org The organization name.
	// Specifies the [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization)
	// that the token is scoped to.
	Org *string `json:"org,omitempty"`

	// OrgID The organization ID.
	// Specifies the [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization) that the authorization is scoped to.
	OrgID *string `json:"orgID,omitempty"`

	// Permissions The list of permissions.
	// An authorization must have at least one permission.
	Permissions *[]Permission `json:"permissions,omitempty"`

	// Status Status of the token. If `inactive`, InfluxDB rejects requests that use the token.
	Status *AuthorizationStatus `json:"status,omitempty"`

	// Token The API token.
	// The token value is unique to the authorization.
	// [API tokens]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#token) are
	// used to authenticate and authorize InfluxDB API requests and `influx`
	// CLI commands--after receiving the request, InfluxDB checks that the
	// token is valid and that the `permissions` allow the requested action(s).
	Token     *string    `json:"token,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// User The user name.
	// Specifies the [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user) that owns the authorization.
	// If the authorization is _scoped_ to a user, the user;
	// otherwise, the creator of the authorization.
	User *string `json:"user,omitempty"`

	// UserID The user ID. Specifies the [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user) that owns the authorization. If _scoped_, the user that the authorization is scoped to; otherwise, the creator of the authorization.
	UserID *string `json:"userID,omitempty"`
}

// AuthorizationStatus Status of the token. If `inactive`, InfluxDB rejects requests that use the token.
type AuthorizationStatus string

// AuthorizationUpdateRequest defines model for AuthorizationUpdateRequest.
type AuthorizationUpdateRequest struct {
	// Description A description of the token.
	Description *string `json:"description,omitempty"`

	// Status Status of the token. If `inactive`, InfluxDB rejects requests that use the token.
	Status *AuthorizationUpdateRequestStatus `json:"status,omitempty"`
}

// AuthorizationUpdateRequestStatus Status of the token. If `inactive`, InfluxDB rejects requests that use the token.
type AuthorizationUpdateRequestStatus string

// DBRP defines model for DBRP.
type DBRP struct {
	// BucketID A bucket ID.
	// Identifies the bucket used as the target for the translation.
	BucketID string `json:"bucketID"`

	// Database A database name.
	// Identifies the InfluxDB v1 database.
	Database string `json:"database"`

	// Default If set to `true`, this DBRP mapping is the default retention policy
	// for the database (specified by the `database` property's value).
	Default bool `json:"default"`

	// Id The resource ID that InfluxDB uses to uniquely identify the database retention policy (DBRP) mapping.
	Id *string `json:"id,omitempty"`

	// Links URI pointers for additional paged results.
	Links *Links `json:"links,omitempty"`

	// OrgID An organization ID.
	// Identifies the [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization) that owns the mapping.
	OrgID string `json:"orgID"`

	// RetentionPolicy A [retention policy](https://docs.influxdata.com/influxdb/v1.8/concepts/glossary/#retention-policy-rp) name.
	// Identifies the InfluxDB v1 retention policy mapping.
	RetentionPolicy string `json:"retention_policy"`

	// Virtual Indicates an autogenerated, virtual mapping based on the bucket name. Currently only available in OSS.
	Virtual *bool `json:"virtual,omitempty"`
}

// DBRPCreate defines model for DBRPCreate.
type DBRPCreate struct {
	// BucketID A bucket ID.
	// Identifies the bucket used as the target for the translation.
	BucketID string `json:"bucketID"`

	// Database A database name.
	// Identifies the InfluxDB v1 database.
	Database string `json:"database"`

	// Default Set to `true` to use this DBRP mapping as the default retention policy
	// for the database (specified by the `database` property's value).
	Default *bool `json:"default,omitempty"`

	// Org An organization name.
	// Identifies the [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization) that owns the mapping.
	Org *string `json:"org,omitempty"`

	// OrgID An organization ID.
	// Identifies the [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization) that owns the mapping.
	OrgID *string `json:"orgID,omitempty"`

	// RetentionPolicy A [retention policy](https://docs.influxdata.com/influxdb/v1.8/concepts/glossary/#retention-policy-rp) name.
	// Identifies the InfluxDB v1 retention policy mapping.
	RetentionPolicy string `json:"retention_policy"`
}

// DBRPGet defines model for DBRPGet.
type DBRPGet struct {
	Content *DBRP `json:"content,omitempty"`
}

// DBRPUpdate defines model for DBRPUpdate.
type DBRPUpdate struct {
	// Default Set to `true` to use this DBRP mapping as the default retention policy
	// for the database (specified by the `database` property's value).
	// To remove the default mapping, set to `false`.
	Default *bool `json:"default,omitempty"`

	// RetentionPolicy A [retention policy](https://docs.influxdata.com/influxdb/v1.8/concepts/glossary/#retention-policy-rp) name.
	// Identifies the InfluxDB v1 retention policy mapping.
	RetentionPolicy *string `json:"retention_policy,omitempty"`
}

// DBRPs defines model for DBRPs.
type DBRPs struct {
	Content *[]DBRP `json:"content,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Code code is the machine-readable error code.
	Code *ErrorCode `json:"code,omitempty"`

	// Err Stack of errors that occurred during processing of the request. Useful for debugging.
	Err *string `json:"err,omitempty"`

	// Message Human-readable message.
	Message *string `json:"message,omitempty"`

	// Op Describes the logical code operation when the error occurred. Useful for debugging.
	Op *string `json:"op,omitempty"`
}

// ErrorCode code is the machine-readable error code.
type ErrorCode string

// Field defines model for Field.
type Field struct {
	// Alias Alias overrides the field name in the returned response.  Applies only if type is `func`
	Alias *string `json:"alias,omitempty"`

	// Args Args are the arguments to the function
	Args *[]Field `json:"args,omitempty"`

	// Type `type` describes the field type. `func` is a function. `field` is a field reference.
	Type *FieldType `json:"type,omitempty"`

	// Value value is the value of the field.  Meaning of the value is implied by the `type` key
	Value *string `json:"value,omitempty"`
}

// FieldType `type` describes the field type. `func` is a function. `field` is a field reference.
type FieldType string

// HealthCheck defines model for HealthCheck.
type HealthCheck struct {
	Checks  *[]HealthCheck    `json:"checks,omitempty"`
	Commit  *string           `json:"commit,omitempty"`
	Message *string           `json:"message,omitempty"`
	Name    string            `json:"name"`
	Status  HealthCheckStatus `json:"status"`
	Version *string           `json:"version,omitempty"`
}

// HealthCheckStatus defines model for HealthCheck.Status.
type HealthCheckStatus string

// LegacyAuthorizationPostRequest defines model for LegacyAuthorizationPostRequest.
type LegacyAuthorizationPostRequest struct {
	// Description A description of the token.
	Description *string `json:"description,omitempty"`

	// OrgID The organization ID. Identifies the organization that the authorization is scoped to.
	OrgID *string `json:"orgID,omitempty"`

	// Permissions The list of permissions that provide `read` and `write` access to organization resources.
	// An authorization must contain at least one permission.
	Permissions *[]Permission `json:"permissions,omitempty"`

	// Status Status of the token. If `inactive`, InfluxDB rejects requests that use the token.
	Status *LegacyAuthorizationPostRequestStatus `json:"status,omitempty"`

	// Token The name that you provide for the authorization.
	Token *string `json:"token,omitempty"`

	// UserID The user ID. Identifies the user that the authorization is scoped to.
	UserID *string `json:"userID,omitempty"`
}

// LegacyAuthorizationPostRequestStatus Status of the token. If `inactive`, InfluxDB rejects requests that use the token.
type LegacyAuthorizationPostRequestStatus string

// Link URI of resource.
type Link = string

// Links URI pointers for additional paged results.
type Links struct {
	// Next URI of resource.
	Next *Link `json:"next,omitempty"`

	// Prev URI of resource.
	Prev *Link `json:"prev,omitempty"`

	// Self URI of resource.
	Self *Link `json:"self,omitempty"`
}

// Permission defines model for Permission.
type Permission struct {
	Action   PermissionAction `json:"action"`
	Resource Resource         `json:"resource"`
}

// PermissionAction defines model for Permission.Action.
type PermissionAction string

// Resource defines model for Resource.
type Resource struct {
	// Id A resource ID.
	// Identifies a specific resource.
	Id *string `json:"id,omitempty"`

	// Name The name of the resource.
	// _Note: not all resource types have a `name` property_.
	Name *string `json:"name,omitempty"`

	// Org An organization name.
	// The organization that owns the resource.
	Org *string `json:"org,omitempty"`

	// OrgID An organization ID.
	// Identifies the organization that owns the resource.
	OrgID *string `json:"orgID,omitempty"`

	// Type A resource type.
	// Identifies the API resource's type (or _kind_).
	Type ResourceType `json:"type"`
}

// ResourceType A resource type.
// Identifies the API resource's type (or _kind_).
type ResourceType string

// TraceSpan defines model for TraceSpan.
type TraceSpan = string

// AuthorizationError defines model for AuthorizationError.
type AuthorizationError struct {
	// Code The HTTP status code description. Default is `unauthorized`.
	Code *string `json:"code,omitempty"`

	// Message A human-readable message that may contain detail about the error.
	Message *string `json:"message,omitempty"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// ResourceNotFoundError defines model for ResourceNotFoundError.
type ResourceNotFoundError = Error

// ServerError defines model for ServerError.
type ServerError = Error

// GetDBRPsParams defines parameters for GetDBRPs.
type GetDBRPsParams struct {
	// OrgID An organization ID.
	// Only returns DBRP mappings for the specified organization.
	OrgID *string `form:"orgID,omitempty" json:"orgID,omitempty"`

	// Org An organization name.
	// Only returns DBRP mappings for the specified organization.
	Org *string `form:"org,omitempty" json:"org,omitempty"`

	// Id A DBPR mapping ID.
	// Only returns the specified DBRP mapping.
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// BucketID A bucket ID.
	// Only returns DBRP mappings that belong to the specified bucket.
	BucketID *string `form:"bucketID,omitempty" json:"bucketID,omitempty"`

	// Default Specifies filtering on default
	Default *bool `form:"default,omitempty" json:"default,omitempty"`

	// Db A database.
	// Only returns DBRP mappings that belong to the 1.x database.
	Db *string `form:"db,omitempty" json:"db,omitempty"`

	// Rp A [retention policy](https://docs.influxdata.com/influxdb/v1.8/concepts/glossary/#retention-policy-rp).
	// Specifies the 1.x retention policy to filter on.
	Rp *string `form:"rp,omitempty" json:"rp,omitempty"`

	// ZapTraceSpan OpenTracing span context
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostDBRPParams defines parameters for PostDBRP.
type PostDBRPParams struct {
	// ZapTraceSpan OpenTracing span context
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteDBRPIDParams defines parameters for DeleteDBRPID.
type DeleteDBRPIDParams struct {
	// OrgID An organization ID.
	// Specifies the organization that owns the DBRP mapping.
	OrgID *string `form:"orgID,omitempty" json:"orgID,omitempty"`

	// Org An organization name.
	// Specifies the organization that owns the DBRP mapping.
	Org *string `form:"org,omitempty" json:"org,omitempty"`

	// ZapTraceSpan OpenTracing span context
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetDBRPsIDParams defines parameters for GetDBRPsID.
type GetDBRPsIDParams struct {
	// OrgID An organization ID.
	// Specifies the organization that owns the DBRP mapping.
	OrgID *string `form:"orgID,omitempty" json:"orgID,omitempty"`

	// Org An organization name.
	// Specifies the organization that owns the DBRP mapping.
	Org *string `form:"org,omitempty" json:"org,omitempty"`

	// ZapTraceSpan OpenTracing span context
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PatchDBRPIDParams defines parameters for PatchDBRPID.
type PatchDBRPIDParams struct {
	// OrgID An organization ID.
	// Specifies the organization that owns the DBRP mapping.
	OrgID *string `form:"orgID,omitempty" json:"orgID,omitempty"`

	// Org An organization name.
	// Specifies the organization that owns the DBRP mapping.
	Org *string `form:"org,omitempty" json:"org,omitempty"`

	// ZapTraceSpan OpenTracing span context
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetLegacyAuthorizationsParams defines parameters for GetLegacyAuthorizations.
type GetLegacyAuthorizationsParams struct {
	// UserID A user ID.
	// Only returns legacy authorizations scoped to the specified [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).
	UserID *string `form:"userID,omitempty" json:"userID,omitempty"`

	// User A user name.
	// Only returns legacy authorizations scoped to the specified [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// OrgID An organization ID.
	// Only returns legacy authorizations that belong to the specified [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization).
	OrgID *string `form:"orgID,omitempty" json:"orgID,omitempty"`

	// Org An organization name.
	// Only returns legacy authorizations that belong to the specified [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization).
	Org *string `form:"org,omitempty" json:"org,omitempty"`

	// Token An authorization name token.
	// Only returns legacy authorizations with the specified name.
	Token *string `form:"token,omitempty" json:"token,omitempty"`

	// AuthID An authorization ID.
	// Returns the specified legacy authorization.
	AuthID *string `form:"authID,omitempty" json:"authID,omitempty"`

	// ZapTraceSpan OpenTracing span context
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostLegacyAuthorizationsParams defines parameters for PostLegacyAuthorizations.
type PostLegacyAuthorizationsParams struct {
	// ZapTraceSpan OpenTracing span context
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteLegacyAuthorizationsIDParams defines parameters for DeleteLegacyAuthorizationsID.
type DeleteLegacyAuthorizationsIDParams struct {
	// ZapTraceSpan OpenTracing span context
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetLegacyAuthorizationsIDParams defines parameters for GetLegacyAuthorizationsID.
type GetLegacyAuthorizationsIDParams struct {
	// ZapTraceSpan OpenTracing span context
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PatchLegacyAuthorizationsIDParams defines parameters for PatchLegacyAuthorizationsID.
type PatchLegacyAuthorizationsIDParams struct {
	// ZapTraceSpan OpenTracing span context
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostLegacyAuthorizationsIDPasswordJSONBody defines parameters for PostLegacyAuthorizationsIDPassword.
type PostLegacyAuthorizationsIDPasswordJSONBody struct {
	Password string `json:"password"`
}

// PostLegacyAuthorizationsIDPasswordParams defines parameters for PostLegacyAuthorizationsIDPassword.
type PostLegacyAuthorizationsIDPasswordParams struct {
	// ZapTraceSpan OpenTracing span context
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostDBRPJSONRequestBody defines body for PostDBRP for application/json ContentType.
type PostDBRPJSONRequestBody = DBRPCreate

// PatchDBRPIDJSONRequestBody defines body for PatchDBRPID for application/json ContentType.
type PatchDBRPIDJSONRequestBody = DBRPUpdate

// PostLegacyAuthorizationsJSONRequestBody defines body for PostLegacyAuthorizations for application/json ContentType.
type PostLegacyAuthorizationsJSONRequestBody = LegacyAuthorizationPostRequest

// PatchLegacyAuthorizationsIDJSONRequestBody defines body for PatchLegacyAuthorizationsID for application/json ContentType.
type PatchLegacyAuthorizationsIDJSONRequestBody = AuthorizationUpdateRequest

// PostLegacyAuthorizationsIDPasswordJSONRequestBody defines body for PostLegacyAuthorizationsIDPassword for application/json ContentType.
type PostLegacyAuthorizationsIDPasswordJSONRequestBody PostLegacyAuthorizationsIDPasswordJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDBRPs request
	GetDBRPs(ctx context.Context, params *GetDBRPsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDBRPWithBody request with any body
	PostDBRPWithBody(ctx context.Context, params *PostDBRPParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDBRP(ctx context.Context, params *PostDBRPParams, body PostDBRPJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDBRPID request
	DeleteDBRPID(ctx context.Context, dbrpID string, params *DeleteDBRPIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDBRPsID request
	GetDBRPsID(ctx context.Context, dbrpID string, params *GetDBRPsIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchDBRPIDWithBody request with any body
	PatchDBRPIDWithBody(ctx context.Context, dbrpID string, params *PatchDBRPIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchDBRPID(ctx context.Context, dbrpID string, params *PatchDBRPIDParams, body PatchDBRPIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegacyAuthorizations request
	GetLegacyAuthorizations(ctx context.Context, params *GetLegacyAuthorizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegacyAuthorizationsWithBody request with any body
	PostLegacyAuthorizationsWithBody(ctx context.Context, params *PostLegacyAuthorizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegacyAuthorizations(ctx context.Context, params *PostLegacyAuthorizationsParams, body PostLegacyAuthorizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLegacyAuthorizationsID request
	DeleteLegacyAuthorizationsID(ctx context.Context, authID string, params *DeleteLegacyAuthorizationsIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegacyAuthorizationsID request
	GetLegacyAuthorizationsID(ctx context.Context, authID string, params *GetLegacyAuthorizationsIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLegacyAuthorizationsIDWithBody request with any body
	PatchLegacyAuthorizationsIDWithBody(ctx context.Context, authID string, params *PatchLegacyAuthorizationsIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLegacyAuthorizationsID(ctx context.Context, authID string, params *PatchLegacyAuthorizationsIDParams, body PatchLegacyAuthorizationsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegacyAuthorizationsIDPasswordWithBody request with any body
	PostLegacyAuthorizationsIDPasswordWithBody(ctx context.Context, authID string, params *PostLegacyAuthorizationsIDPasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegacyAuthorizationsIDPassword(ctx context.Context, authID string, params *PostLegacyAuthorizationsIDPasswordParams, body PostLegacyAuthorizationsIDPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDBRPs(ctx context.Context, params *GetDBRPsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDBRPsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDBRPWithBody(ctx context.Context, params *PostDBRPParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDBRPRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDBRP(ctx context.Context, params *PostDBRPParams, body PostDBRPJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDBRPRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDBRPID(ctx context.Context, dbrpID string, params *DeleteDBRPIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDBRPIDRequest(c.Server, dbrpID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDBRPsID(ctx context.Context, dbrpID string, params *GetDBRPsIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDBRPsIDRequest(c.Server, dbrpID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDBRPIDWithBody(ctx context.Context, dbrpID string, params *PatchDBRPIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDBRPIDRequestWithBody(c.Server, dbrpID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDBRPID(ctx context.Context, dbrpID string, params *PatchDBRPIDParams, body PatchDBRPIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDBRPIDRequest(c.Server, dbrpID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegacyAuthorizations(ctx context.Context, params *GetLegacyAuthorizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegacyAuthorizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegacyAuthorizationsWithBody(ctx context.Context, params *PostLegacyAuthorizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegacyAuthorizationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegacyAuthorizations(ctx context.Context, params *PostLegacyAuthorizationsParams, body PostLegacyAuthorizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegacyAuthorizationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLegacyAuthorizationsID(ctx context.Context, authID string, params *DeleteLegacyAuthorizationsIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLegacyAuthorizationsIDRequest(c.Server, authID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegacyAuthorizationsID(ctx context.Context, authID string, params *GetLegacyAuthorizationsIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegacyAuthorizationsIDRequest(c.Server, authID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegacyAuthorizationsIDWithBody(ctx context.Context, authID string, params *PatchLegacyAuthorizationsIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegacyAuthorizationsIDRequestWithBody(c.Server, authID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegacyAuthorizationsID(ctx context.Context, authID string, params *PatchLegacyAuthorizationsIDParams, body PatchLegacyAuthorizationsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegacyAuthorizationsIDRequest(c.Server, authID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegacyAuthorizationsIDPasswordWithBody(ctx context.Context, authID string, params *PostLegacyAuthorizationsIDPasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegacyAuthorizationsIDPasswordRequestWithBody(c.Server, authID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegacyAuthorizationsIDPassword(ctx context.Context, authID string, params *PostLegacyAuthorizationsIDPasswordParams, body PostLegacyAuthorizationsIDPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegacyAuthorizationsIDPasswordRequest(c.Server, authID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDBRPsRequest generates requests for GetDBRPs
func NewGetDBRPsRequest(server string, params *GetDBRPsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbrps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrgID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgID", runtime.ParamLocationQuery, *params.OrgID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Org != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "org", runtime.ParamLocationQuery, *params.Org); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BucketID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bucketID", runtime.ParamLocationQuery, *params.BucketID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Default != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default", runtime.ParamLocationQuery, *params.Default); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Db != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "db", runtime.ParamLocationQuery, *params.Db); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rp", runtime.ParamLocationQuery, *params.Rp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ZapTraceSpan != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, *params.ZapTraceSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Zap-Trace-Span", headerParam0)
		}

	}

	return req, nil
}

// NewPostDBRPRequest calls the generic PostDBRP builder with application/json body
func NewPostDBRPRequest(server string, params *PostDBRPParams, body PostDBRPJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDBRPRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostDBRPRequestWithBody generates requests for PostDBRP with any type of body
func NewPostDBRPRequestWithBody(server string, params *PostDBRPParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbrps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ZapTraceSpan != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, *params.ZapTraceSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Zap-Trace-Span", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteDBRPIDRequest generates requests for DeleteDBRPID
func NewDeleteDBRPIDRequest(server string, dbrpID string, params *DeleteDBRPIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dbrpID", runtime.ParamLocationPath, dbrpID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbrps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrgID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgID", runtime.ParamLocationQuery, *params.OrgID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Org != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "org", runtime.ParamLocationQuery, *params.Org); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ZapTraceSpan != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, *params.ZapTraceSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Zap-Trace-Span", headerParam0)
		}

	}

	return req, nil
}

// NewGetDBRPsIDRequest generates requests for GetDBRPsID
func NewGetDBRPsIDRequest(server string, dbrpID string, params *GetDBRPsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dbrpID", runtime.ParamLocationPath, dbrpID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbrps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrgID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgID", runtime.ParamLocationQuery, *params.OrgID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Org != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "org", runtime.ParamLocationQuery, *params.Org); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ZapTraceSpan != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, *params.ZapTraceSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Zap-Trace-Span", headerParam0)
		}

	}

	return req, nil
}

// NewPatchDBRPIDRequest calls the generic PatchDBRPID builder with application/json body
func NewPatchDBRPIDRequest(server string, dbrpID string, params *PatchDBRPIDParams, body PatchDBRPIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchDBRPIDRequestWithBody(server, dbrpID, params, "application/json", bodyReader)
}

// NewPatchDBRPIDRequestWithBody generates requests for PatchDBRPID with any type of body
func NewPatchDBRPIDRequestWithBody(server string, dbrpID string, params *PatchDBRPIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dbrpID", runtime.ParamLocationPath, dbrpID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dbrps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrgID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgID", runtime.ParamLocationQuery, *params.OrgID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Org != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "org", runtime.ParamLocationQuery, *params.Org); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ZapTraceSpan != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, *params.ZapTraceSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Zap-Trace-Span", headerParam0)
		}

	}

	return req, nil
}

// NewGetLegacyAuthorizationsRequest generates requests for GetLegacyAuthorizations
func NewGetLegacyAuthorizationsRequest(server string, params *GetLegacyAuthorizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legacy/authorizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userID", runtime.ParamLocationQuery, *params.UserID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrgID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgID", runtime.ParamLocationQuery, *params.OrgID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Org != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "org", runtime.ParamLocationQuery, *params.Org); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authID", runtime.ParamLocationQuery, *params.AuthID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ZapTraceSpan != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, *params.ZapTraceSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Zap-Trace-Span", headerParam0)
		}

	}

	return req, nil
}

// NewPostLegacyAuthorizationsRequest calls the generic PostLegacyAuthorizations builder with application/json body
func NewPostLegacyAuthorizationsRequest(server string, params *PostLegacyAuthorizationsParams, body PostLegacyAuthorizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegacyAuthorizationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostLegacyAuthorizationsRequestWithBody generates requests for PostLegacyAuthorizations with any type of body
func NewPostLegacyAuthorizationsRequestWithBody(server string, params *PostLegacyAuthorizationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legacy/authorizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ZapTraceSpan != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, *params.ZapTraceSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Zap-Trace-Span", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteLegacyAuthorizationsIDRequest generates requests for DeleteLegacyAuthorizationsID
func NewDeleteLegacyAuthorizationsIDRequest(server string, authID string, params *DeleteLegacyAuthorizationsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authID", runtime.ParamLocationPath, authID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legacy/authorizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ZapTraceSpan != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, *params.ZapTraceSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Zap-Trace-Span", headerParam0)
		}

	}

	return req, nil
}

// NewGetLegacyAuthorizationsIDRequest generates requests for GetLegacyAuthorizationsID
func NewGetLegacyAuthorizationsIDRequest(server string, authID string, params *GetLegacyAuthorizationsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authID", runtime.ParamLocationPath, authID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legacy/authorizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ZapTraceSpan != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, *params.ZapTraceSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Zap-Trace-Span", headerParam0)
		}

	}

	return req, nil
}

// NewPatchLegacyAuthorizationsIDRequest calls the generic PatchLegacyAuthorizationsID builder with application/json body
func NewPatchLegacyAuthorizationsIDRequest(server string, authID string, params *PatchLegacyAuthorizationsIDParams, body PatchLegacyAuthorizationsIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLegacyAuthorizationsIDRequestWithBody(server, authID, params, "application/json", bodyReader)
}

// NewPatchLegacyAuthorizationsIDRequestWithBody generates requests for PatchLegacyAuthorizationsID with any type of body
func NewPatchLegacyAuthorizationsIDRequestWithBody(server string, authID string, params *PatchLegacyAuthorizationsIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authID", runtime.ParamLocationPath, authID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legacy/authorizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ZapTraceSpan != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, *params.ZapTraceSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Zap-Trace-Span", headerParam0)
		}

	}

	return req, nil
}

// NewPostLegacyAuthorizationsIDPasswordRequest calls the generic PostLegacyAuthorizationsIDPassword builder with application/json body
func NewPostLegacyAuthorizationsIDPasswordRequest(server string, authID string, params *PostLegacyAuthorizationsIDPasswordParams, body PostLegacyAuthorizationsIDPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegacyAuthorizationsIDPasswordRequestWithBody(server, authID, params, "application/json", bodyReader)
}

// NewPostLegacyAuthorizationsIDPasswordRequestWithBody generates requests for PostLegacyAuthorizationsIDPassword with any type of body
func NewPostLegacyAuthorizationsIDPasswordRequestWithBody(server string, authID string, params *PostLegacyAuthorizationsIDPasswordParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authID", runtime.ParamLocationPath, authID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legacy/authorizations/%s/password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ZapTraceSpan != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, *params.ZapTraceSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Zap-Trace-Span", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDBRPsWithResponse request
	GetDBRPsWithResponse(ctx context.Context, params *GetDBRPsParams, reqEditors ...RequestEditorFn) (*GetDBRPsResponse, error)

	// PostDBRPWithBodyWithResponse request with any body
	PostDBRPWithBodyWithResponse(ctx context.Context, params *PostDBRPParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDBRPResponse, error)

	PostDBRPWithResponse(ctx context.Context, params *PostDBRPParams, body PostDBRPJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDBRPResponse, error)

	// DeleteDBRPIDWithResponse request
	DeleteDBRPIDWithResponse(ctx context.Context, dbrpID string, params *DeleteDBRPIDParams, reqEditors ...RequestEditorFn) (*DeleteDBRPIDResponse, error)

	// GetDBRPsIDWithResponse request
	GetDBRPsIDWithResponse(ctx context.Context, dbrpID string, params *GetDBRPsIDParams, reqEditors ...RequestEditorFn) (*GetDBRPsIDResponse, error)

	// PatchDBRPIDWithBodyWithResponse request with any body
	PatchDBRPIDWithBodyWithResponse(ctx context.Context, dbrpID string, params *PatchDBRPIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDBRPIDResponse, error)

	PatchDBRPIDWithResponse(ctx context.Context, dbrpID string, params *PatchDBRPIDParams, body PatchDBRPIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDBRPIDResponse, error)

	// GetLegacyAuthorizationsWithResponse request
	GetLegacyAuthorizationsWithResponse(ctx context.Context, params *GetLegacyAuthorizationsParams, reqEditors ...RequestEditorFn) (*GetLegacyAuthorizationsResponse, error)

	// PostLegacyAuthorizationsWithBodyWithResponse request with any body
	PostLegacyAuthorizationsWithBodyWithResponse(ctx context.Context, params *PostLegacyAuthorizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegacyAuthorizationsResponse, error)

	PostLegacyAuthorizationsWithResponse(ctx context.Context, params *PostLegacyAuthorizationsParams, body PostLegacyAuthorizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegacyAuthorizationsResponse, error)

	// DeleteLegacyAuthorizationsIDWithResponse request
	DeleteLegacyAuthorizationsIDWithResponse(ctx context.Context, authID string, params *DeleteLegacyAuthorizationsIDParams, reqEditors ...RequestEditorFn) (*DeleteLegacyAuthorizationsIDResponse, error)

	// GetLegacyAuthorizationsIDWithResponse request
	GetLegacyAuthorizationsIDWithResponse(ctx context.Context, authID string, params *GetLegacyAuthorizationsIDParams, reqEditors ...RequestEditorFn) (*GetLegacyAuthorizationsIDResponse, error)

	// PatchLegacyAuthorizationsIDWithBodyWithResponse request with any body
	PatchLegacyAuthorizationsIDWithBodyWithResponse(ctx context.Context, authID string, params *PatchLegacyAuthorizationsIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegacyAuthorizationsIDResponse, error)

	PatchLegacyAuthorizationsIDWithResponse(ctx context.Context, authID string, params *PatchLegacyAuthorizationsIDParams, body PatchLegacyAuthorizationsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegacyAuthorizationsIDResponse, error)

	// PostLegacyAuthorizationsIDPasswordWithBodyWithResponse request with any body
	PostLegacyAuthorizationsIDPasswordWithBodyWithResponse(ctx context.Context, authID string, params *PostLegacyAuthorizationsIDPasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegacyAuthorizationsIDPasswordResponse, error)

	PostLegacyAuthorizationsIDPasswordWithResponse(ctx context.Context, authID string, params *PostLegacyAuthorizationsIDPasswordParams, body PostLegacyAuthorizationsIDPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegacyAuthorizationsIDPasswordResponse, error)
}

type GetDBRPsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBRPs
	JSON400      *Error
	JSON401      *AuthorizationError
	JSON500      *InternalServerError
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetDBRPsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDBRPsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDBRPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DBRP
	JSON400      *Error
	JSON401      *AuthorizationError
	JSON404      *ResourceNotFoundError
	JSON500      *InternalServerError
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostDBRPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDBRPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDBRPIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *AuthorizationError
	JSON404      *ResourceNotFoundError
	JSON500      *InternalServerError
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteDBRPIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDBRPIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDBRPsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBRPGet
	JSON400      *Error
	JSON401      *AuthorizationError
	JSON404      *ResourceNotFoundError
	JSON500      *InternalServerError
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetDBRPsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDBRPsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchDBRPIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBRPGet
	JSON400      *Error
	JSON401      *AuthorizationError
	JSON404      *ResourceNotFoundError
	JSON500      *InternalServerError
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PatchDBRPIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchDBRPIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegacyAuthorizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Authorizations *[]Authorization `json:"authorizations,omitempty"`

		// Links URI pointers for additional paged results.
		Links *Links `json:"links,omitempty"`
	}
	JSONDefault *ServerError
}

// Status returns HTTPResponse.Status
func (r GetLegacyAuthorizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegacyAuthorizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegacyAuthorizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Authorization
	JSON400      *ServerError
	JSON401      *struct {
		// Code The HTTP status code description. Default is `unauthorized`.
		Code *string `json:"code,omitempty"`

		// Message A human-readable message that may contain detail about the error.
		Message *string `json:"message,omitempty"`
	}
	JSONDefault *ServerError
}

// Status returns HTTPResponse.Status
func (r PostLegacyAuthorizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegacyAuthorizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLegacyAuthorizationsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteLegacyAuthorizationsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLegacyAuthorizationsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegacyAuthorizationsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Authorization
	JSONDefault  *ServerError
}

// Status returns HTTPResponse.Status
func (r GetLegacyAuthorizationsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegacyAuthorizationsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLegacyAuthorizationsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Authorization
	JSONDefault  *ServerError
}

// Status returns HTTPResponse.Status
func (r PatchLegacyAuthorizationsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLegacyAuthorizationsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegacyAuthorizationsIDPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ServerError
}

// Status returns HTTPResponse.Status
func (r PostLegacyAuthorizationsIDPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegacyAuthorizationsIDPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDBRPsWithResponse request returning *GetDBRPsResponse
func (c *ClientWithResponses) GetDBRPsWithResponse(ctx context.Context, params *GetDBRPsParams, reqEditors ...RequestEditorFn) (*GetDBRPsResponse, error) {
	rsp, err := c.GetDBRPs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDBRPsResponse(rsp)
}

// PostDBRPWithBodyWithResponse request with arbitrary body returning *PostDBRPResponse
func (c *ClientWithResponses) PostDBRPWithBodyWithResponse(ctx context.Context, params *PostDBRPParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDBRPResponse, error) {
	rsp, err := c.PostDBRPWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDBRPResponse(rsp)
}

func (c *ClientWithResponses) PostDBRPWithResponse(ctx context.Context, params *PostDBRPParams, body PostDBRPJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDBRPResponse, error) {
	rsp, err := c.PostDBRP(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDBRPResponse(rsp)
}

// DeleteDBRPIDWithResponse request returning *DeleteDBRPIDResponse
func (c *ClientWithResponses) DeleteDBRPIDWithResponse(ctx context.Context, dbrpID string, params *DeleteDBRPIDParams, reqEditors ...RequestEditorFn) (*DeleteDBRPIDResponse, error) {
	rsp, err := c.DeleteDBRPID(ctx, dbrpID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDBRPIDResponse(rsp)
}

// GetDBRPsIDWithResponse request returning *GetDBRPsIDResponse
func (c *ClientWithResponses) GetDBRPsIDWithResponse(ctx context.Context, dbrpID string, params *GetDBRPsIDParams, reqEditors ...RequestEditorFn) (*GetDBRPsIDResponse, error) {
	rsp, err := c.GetDBRPsID(ctx, dbrpID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDBRPsIDResponse(rsp)
}

// PatchDBRPIDWithBodyWithResponse request with arbitrary body returning *PatchDBRPIDResponse
func (c *ClientWithResponses) PatchDBRPIDWithBodyWithResponse(ctx context.Context, dbrpID string, params *PatchDBRPIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDBRPIDResponse, error) {
	rsp, err := c.PatchDBRPIDWithBody(ctx, dbrpID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDBRPIDResponse(rsp)
}

func (c *ClientWithResponses) PatchDBRPIDWithResponse(ctx context.Context, dbrpID string, params *PatchDBRPIDParams, body PatchDBRPIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDBRPIDResponse, error) {
	rsp, err := c.PatchDBRPID(ctx, dbrpID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDBRPIDResponse(rsp)
}

// GetLegacyAuthorizationsWithResponse request returning *GetLegacyAuthorizationsResponse
func (c *ClientWithResponses) GetLegacyAuthorizationsWithResponse(ctx context.Context, params *GetLegacyAuthorizationsParams, reqEditors ...RequestEditorFn) (*GetLegacyAuthorizationsResponse, error) {
	rsp, err := c.GetLegacyAuthorizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegacyAuthorizationsResponse(rsp)
}

// PostLegacyAuthorizationsWithBodyWithResponse request with arbitrary body returning *PostLegacyAuthorizationsResponse
func (c *ClientWithResponses) PostLegacyAuthorizationsWithBodyWithResponse(ctx context.Context, params *PostLegacyAuthorizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegacyAuthorizationsResponse, error) {
	rsp, err := c.PostLegacyAuthorizationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegacyAuthorizationsResponse(rsp)
}

func (c *ClientWithResponses) PostLegacyAuthorizationsWithResponse(ctx context.Context, params *PostLegacyAuthorizationsParams, body PostLegacyAuthorizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegacyAuthorizationsResponse, error) {
	rsp, err := c.PostLegacyAuthorizations(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegacyAuthorizationsResponse(rsp)
}

// DeleteLegacyAuthorizationsIDWithResponse request returning *DeleteLegacyAuthorizationsIDResponse
func (c *ClientWithResponses) DeleteLegacyAuthorizationsIDWithResponse(ctx context.Context, authID string, params *DeleteLegacyAuthorizationsIDParams, reqEditors ...RequestEditorFn) (*DeleteLegacyAuthorizationsIDResponse, error) {
	rsp, err := c.DeleteLegacyAuthorizationsID(ctx, authID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLegacyAuthorizationsIDResponse(rsp)
}

// GetLegacyAuthorizationsIDWithResponse request returning *GetLegacyAuthorizationsIDResponse
func (c *ClientWithResponses) GetLegacyAuthorizationsIDWithResponse(ctx context.Context, authID string, params *GetLegacyAuthorizationsIDParams, reqEditors ...RequestEditorFn) (*GetLegacyAuthorizationsIDResponse, error) {
	rsp, err := c.GetLegacyAuthorizationsID(ctx, authID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegacyAuthorizationsIDResponse(rsp)
}

// PatchLegacyAuthorizationsIDWithBodyWithResponse request with arbitrary body returning *PatchLegacyAuthorizationsIDResponse
func (c *ClientWithResponses) PatchLegacyAuthorizationsIDWithBodyWithResponse(ctx context.Context, authID string, params *PatchLegacyAuthorizationsIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegacyAuthorizationsIDResponse, error) {
	rsp, err := c.PatchLegacyAuthorizationsIDWithBody(ctx, authID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegacyAuthorizationsIDResponse(rsp)
}

func (c *ClientWithResponses) PatchLegacyAuthorizationsIDWithResponse(ctx context.Context, authID string, params *PatchLegacyAuthorizationsIDParams, body PatchLegacyAuthorizationsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegacyAuthorizationsIDResponse, error) {
	rsp, err := c.PatchLegacyAuthorizationsID(ctx, authID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegacyAuthorizationsIDResponse(rsp)
}

// PostLegacyAuthorizationsIDPasswordWithBodyWithResponse request with arbitrary body returning *PostLegacyAuthorizationsIDPasswordResponse
func (c *ClientWithResponses) PostLegacyAuthorizationsIDPasswordWithBodyWithResponse(ctx context.Context, authID string, params *PostLegacyAuthorizationsIDPasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegacyAuthorizationsIDPasswordResponse, error) {
	rsp, err := c.PostLegacyAuthorizationsIDPasswordWithBody(ctx, authID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegacyAuthorizationsIDPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostLegacyAuthorizationsIDPasswordWithResponse(ctx context.Context, authID string, params *PostLegacyAuthorizationsIDPasswordParams, body PostLegacyAuthorizationsIDPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegacyAuthorizationsIDPasswordResponse, error) {
	rsp, err := c.PostLegacyAuthorizationsIDPassword(ctx, authID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegacyAuthorizationsIDPasswordResponse(rsp)
}

// ParseGetDBRPsResponse parses an HTTP response from a GetDBRPsWithResponse call
func ParseGetDBRPsResponse(rsp *http.Response) (*GetDBRPsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDBRPsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBRPs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest AuthorizationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostDBRPResponse parses an HTTP response from a PostDBRPWithResponse call
func ParsePostDBRPResponse(rsp *http.Response) (*PostDBRPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDBRPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DBRP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest AuthorizationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResourceNotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteDBRPIDResponse parses an HTTP response from a DeleteDBRPIDWithResponse call
func ParseDeleteDBRPIDResponse(rsp *http.Response) (*DeleteDBRPIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDBRPIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest AuthorizationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResourceNotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDBRPsIDResponse parses an HTTP response from a GetDBRPsIDWithResponse call
func ParseGetDBRPsIDResponse(rsp *http.Response) (*GetDBRPsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDBRPsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBRPGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest AuthorizationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResourceNotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchDBRPIDResponse parses an HTTP response from a PatchDBRPIDWithResponse call
func ParsePatchDBRPIDResponse(rsp *http.Response) (*PatchDBRPIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchDBRPIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBRPGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest AuthorizationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResourceNotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLegacyAuthorizationsResponse parses an HTTP response from a GetLegacyAuthorizationsWithResponse call
func ParseGetLegacyAuthorizationsResponse(rsp *http.Response) (*GetLegacyAuthorizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegacyAuthorizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Authorizations *[]Authorization `json:"authorizations,omitempty"`

			// Links URI pointers for additional paged results.
			Links *Links `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostLegacyAuthorizationsResponse parses an HTTP response from a PostLegacyAuthorizationsWithResponse call
func ParsePostLegacyAuthorizationsResponse(rsp *http.Response) (*PostLegacyAuthorizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegacyAuthorizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Authorization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Code The HTTP status code description. Default is `unauthorized`.
			Code *string `json:"code,omitempty"`

			// Message A human-readable message that may contain detail about the error.
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteLegacyAuthorizationsIDResponse parses an HTTP response from a DeleteLegacyAuthorizationsIDWithResponse call
func ParseDeleteLegacyAuthorizationsIDResponse(rsp *http.Response) (*DeleteLegacyAuthorizationsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLegacyAuthorizationsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLegacyAuthorizationsIDResponse parses an HTTP response from a GetLegacyAuthorizationsIDWithResponse call
func ParseGetLegacyAuthorizationsIDResponse(rsp *http.Response) (*GetLegacyAuthorizationsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegacyAuthorizationsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Authorization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchLegacyAuthorizationsIDResponse parses an HTTP response from a PatchLegacyAuthorizationsIDWithResponse call
func ParsePatchLegacyAuthorizationsIDResponse(rsp *http.Response) (*PatchLegacyAuthorizationsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLegacyAuthorizationsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Authorization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostLegacyAuthorizationsIDPasswordResponse parses an HTTP response from a PostLegacyAuthorizationsIDPasswordWithResponse call
func ParsePostLegacyAuthorizationsIDPasswordResponse(rsp *http.Response) (*PostLegacyAuthorizationsIDPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegacyAuthorizationsIDPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List database retention policy mappings
	// (GET /dbrps)
	GetDBRPs(ctx echo.Context, params GetDBRPsParams) error
	// Add a database retention policy mapping
	// (POST /dbrps)
	PostDBRP(ctx echo.Context, params PostDBRPParams) error
	// Delete a database retention policy
	// (DELETE /dbrps/{dbrpID})
	DeleteDBRPID(ctx echo.Context, dbrpID string, params DeleteDBRPIDParams) error
	// Retrieve a database retention policy mapping
	// (GET /dbrps/{dbrpID})
	GetDBRPsID(ctx echo.Context, dbrpID string, params GetDBRPsIDParams) error
	// Update a database retention policy mapping
	// (PATCH /dbrps/{dbrpID})
	PatchDBRPID(ctx echo.Context, dbrpID string, params PatchDBRPIDParams) error
	// List all legacy authorizations
	// (GET /legacy/authorizations)
	GetLegacyAuthorizations(ctx echo.Context, params GetLegacyAuthorizationsParams) error
	// Create a legacy authorization
	// (POST /legacy/authorizations)
	PostLegacyAuthorizations(ctx echo.Context, params PostLegacyAuthorizationsParams) error
	// Delete a legacy authorization
	// (DELETE /legacy/authorizations/{authID})
	DeleteLegacyAuthorizationsID(ctx echo.Context, authID string, params DeleteLegacyAuthorizationsIDParams) error
	// Retrieve a legacy authorization
	// (GET /legacy/authorizations/{authID})
	GetLegacyAuthorizationsID(ctx echo.Context, authID string, params GetLegacyAuthorizationsIDParams) error
	// Update a legacy authorization to be active or inactive
	// (PATCH /legacy/authorizations/{authID})
	PatchLegacyAuthorizationsID(ctx echo.Context, authID string, params PatchLegacyAuthorizationsIDParams) error
	// Set a legacy authorization password
	// (POST /legacy/authorizations/{authID}/password)
	PostLegacyAuthorizationsIDPassword(ctx echo.Context, authID string, params PostLegacyAuthorizationsIDPasswordParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDBRPs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDBRPs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDBRPsParams
	// ------------- Optional query parameter "orgID" -------------

	err = runtime.BindQueryParameter("form", true, false, "orgID", ctx.QueryParams(), &params.OrgID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgID: %s", err))
	}

	// ------------- Optional query parameter "org" -------------

	err = runtime.BindQueryParameter("form", true, false, "org", ctx.QueryParams(), &params.Org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "bucketID" -------------

	err = runtime.BindQueryParameter("form", true, false, "bucketID", ctx.QueryParams(), &params.BucketID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bucketID: %s", err))
	}

	// ------------- Optional query parameter "default" -------------

	err = runtime.BindQueryParameter("form", true, false, "default", ctx.QueryParams(), &params.Default)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter default: %s", err))
	}

	// ------------- Optional query parameter "db" -------------

	err = runtime.BindQueryParameter("form", true, false, "db", ctx.QueryParams(), &params.Db)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter db: %s", err))
	}

	// ------------- Optional query parameter "rp" -------------

	err = runtime.BindQueryParameter("form", true, false, "rp", ctx.QueryParams(), &params.Rp)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rp: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Zap-Trace-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Zap-Trace-Span")]; found {
		var ZapTraceSpan TraceSpan
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Zap-Trace-Span, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, valueList[0], &ZapTraceSpan)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Zap-Trace-Span: %s", err))
		}

		params.ZapTraceSpan = &ZapTraceSpan
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDBRPs(ctx, params)
	return err
}

// PostDBRP converts echo context to params.
func (w *ServerInterfaceWrapper) PostDBRP(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDBRPParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Zap-Trace-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Zap-Trace-Span")]; found {
		var ZapTraceSpan TraceSpan
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Zap-Trace-Span, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, valueList[0], &ZapTraceSpan)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Zap-Trace-Span: %s", err))
		}

		params.ZapTraceSpan = &ZapTraceSpan
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDBRP(ctx, params)
	return err
}

// DeleteDBRPID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDBRPID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dbrpID" -------------
	var dbrpID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dbrpID", runtime.ParamLocationPath, ctx.Param("dbrpID"), &dbrpID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dbrpID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteDBRPIDParams
	// ------------- Optional query parameter "orgID" -------------

	err = runtime.BindQueryParameter("form", true, false, "orgID", ctx.QueryParams(), &params.OrgID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgID: %s", err))
	}

	// ------------- Optional query parameter "org" -------------

	err = runtime.BindQueryParameter("form", true, false, "org", ctx.QueryParams(), &params.Org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Zap-Trace-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Zap-Trace-Span")]; found {
		var ZapTraceSpan TraceSpan
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Zap-Trace-Span, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, valueList[0], &ZapTraceSpan)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Zap-Trace-Span: %s", err))
		}

		params.ZapTraceSpan = &ZapTraceSpan
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDBRPID(ctx, dbrpID, params)
	return err
}

// GetDBRPsID converts echo context to params.
func (w *ServerInterfaceWrapper) GetDBRPsID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dbrpID" -------------
	var dbrpID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dbrpID", runtime.ParamLocationPath, ctx.Param("dbrpID"), &dbrpID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dbrpID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDBRPsIDParams
	// ------------- Optional query parameter "orgID" -------------

	err = runtime.BindQueryParameter("form", true, false, "orgID", ctx.QueryParams(), &params.OrgID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgID: %s", err))
	}

	// ------------- Optional query parameter "org" -------------

	err = runtime.BindQueryParameter("form", true, false, "org", ctx.QueryParams(), &params.Org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Zap-Trace-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Zap-Trace-Span")]; found {
		var ZapTraceSpan TraceSpan
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Zap-Trace-Span, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, valueList[0], &ZapTraceSpan)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Zap-Trace-Span: %s", err))
		}

		params.ZapTraceSpan = &ZapTraceSpan
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDBRPsID(ctx, dbrpID, params)
	return err
}

// PatchDBRPID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchDBRPID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dbrpID" -------------
	var dbrpID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dbrpID", runtime.ParamLocationPath, ctx.Param("dbrpID"), &dbrpID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dbrpID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchDBRPIDParams
	// ------------- Optional query parameter "orgID" -------------

	err = runtime.BindQueryParameter("form", true, false, "orgID", ctx.QueryParams(), &params.OrgID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgID: %s", err))
	}

	// ------------- Optional query parameter "org" -------------

	err = runtime.BindQueryParameter("form", true, false, "org", ctx.QueryParams(), &params.Org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Zap-Trace-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Zap-Trace-Span")]; found {
		var ZapTraceSpan TraceSpan
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Zap-Trace-Span, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, valueList[0], &ZapTraceSpan)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Zap-Trace-Span: %s", err))
		}

		params.ZapTraceSpan = &ZapTraceSpan
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchDBRPID(ctx, dbrpID, params)
	return err
}

// GetLegacyAuthorizations converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegacyAuthorizations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegacyAuthorizationsParams
	// ------------- Optional query parameter "userID" -------------

	err = runtime.BindQueryParameter("form", true, false, "userID", ctx.QueryParams(), &params.UserID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", ctx.QueryParams(), &params.User)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user: %s", err))
	}

	// ------------- Optional query parameter "orgID" -------------

	err = runtime.BindQueryParameter("form", true, false, "orgID", ctx.QueryParams(), &params.OrgID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgID: %s", err))
	}

	// ------------- Optional query parameter "org" -------------

	err = runtime.BindQueryParameter("form", true, false, "org", ctx.QueryParams(), &params.Org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// ------------- Optional query parameter "authID" -------------

	err = runtime.BindQueryParameter("form", true, false, "authID", ctx.QueryParams(), &params.AuthID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authID: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Zap-Trace-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Zap-Trace-Span")]; found {
		var ZapTraceSpan TraceSpan
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Zap-Trace-Span, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, valueList[0], &ZapTraceSpan)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Zap-Trace-Span: %s", err))
		}

		params.ZapTraceSpan = &ZapTraceSpan
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegacyAuthorizations(ctx, params)
	return err
}

// PostLegacyAuthorizations converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegacyAuthorizations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegacyAuthorizationsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Zap-Trace-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Zap-Trace-Span")]; found {
		var ZapTraceSpan TraceSpan
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Zap-Trace-Span, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, valueList[0], &ZapTraceSpan)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Zap-Trace-Span: %s", err))
		}

		params.ZapTraceSpan = &ZapTraceSpan
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegacyAuthorizations(ctx, params)
	return err
}

// DeleteLegacyAuthorizationsID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLegacyAuthorizationsID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authID" -------------
	var authID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "authID", runtime.ParamLocationPath, ctx.Param("authID"), &authID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteLegacyAuthorizationsIDParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Zap-Trace-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Zap-Trace-Span")]; found {
		var ZapTraceSpan TraceSpan
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Zap-Trace-Span, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, valueList[0], &ZapTraceSpan)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Zap-Trace-Span: %s", err))
		}

		params.ZapTraceSpan = &ZapTraceSpan
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLegacyAuthorizationsID(ctx, authID, params)
	return err
}

// GetLegacyAuthorizationsID converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegacyAuthorizationsID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authID" -------------
	var authID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "authID", runtime.ParamLocationPath, ctx.Param("authID"), &authID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegacyAuthorizationsIDParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Zap-Trace-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Zap-Trace-Span")]; found {
		var ZapTraceSpan TraceSpan
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Zap-Trace-Span, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, valueList[0], &ZapTraceSpan)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Zap-Trace-Span: %s", err))
		}

		params.ZapTraceSpan = &ZapTraceSpan
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegacyAuthorizationsID(ctx, authID, params)
	return err
}

// PatchLegacyAuthorizationsID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchLegacyAuthorizationsID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authID" -------------
	var authID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "authID", runtime.ParamLocationPath, ctx.Param("authID"), &authID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchLegacyAuthorizationsIDParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Zap-Trace-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Zap-Trace-Span")]; found {
		var ZapTraceSpan TraceSpan
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Zap-Trace-Span, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, valueList[0], &ZapTraceSpan)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Zap-Trace-Span: %s", err))
		}

		params.ZapTraceSpan = &ZapTraceSpan
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchLegacyAuthorizationsID(ctx, authID, params)
	return err
}

// PostLegacyAuthorizationsIDPassword converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegacyAuthorizationsIDPassword(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authID" -------------
	var authID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "authID", runtime.ParamLocationPath, ctx.Param("authID"), &authID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegacyAuthorizationsIDPasswordParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Zap-Trace-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Zap-Trace-Span")]; found {
		var ZapTraceSpan TraceSpan
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Zap-Trace-Span, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, valueList[0], &ZapTraceSpan)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Zap-Trace-Span: %s", err))
		}

		params.ZapTraceSpan = &ZapTraceSpan
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegacyAuthorizationsIDPassword(ctx, authID, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dbrps", wrapper.GetDBRPs)
	router.POST(baseURL+"/dbrps", wrapper.PostDBRP)
	router.DELETE(baseURL+"/dbrps/:dbrpID", wrapper.DeleteDBRPID)
	router.GET(baseURL+"/dbrps/:dbrpID", wrapper.GetDBRPsID)
	router.PATCH(baseURL+"/dbrps/:dbrpID", wrapper.PatchDBRPID)
	router.GET(baseURL+"/legacy/authorizations", wrapper.GetLegacyAuthorizations)
	router.POST(baseURL+"/legacy/authorizations", wrapper.PostLegacyAuthorizations)
	router.DELETE(baseURL+"/legacy/authorizations/:authID", wrapper.DeleteLegacyAuthorizationsID)
	router.GET(baseURL+"/legacy/authorizations/:authID", wrapper.GetLegacyAuthorizationsID)
	router.PATCH(baseURL+"/legacy/authorizations/:authID", wrapper.PatchLegacyAuthorizationsID)
	router.POST(baseURL+"/legacy/authorizations/:authID/password", wrapper.PostLegacyAuthorizationsIDPassword)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
