// Package influxdbv2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package influxdbv2

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AuthorizationStatus.
const (
	AuthorizationStatusActive   AuthorizationStatus = "active"
	AuthorizationStatusInactive AuthorizationStatus = "inactive"
)

// Defines values for AuthorizationUpdateRequestStatus.
const (
	AuthorizationUpdateRequestStatusActive   AuthorizationUpdateRequestStatus = "active"
	AuthorizationUpdateRequestStatusInactive AuthorizationUpdateRequestStatus = "inactive"
)

// Defines values for ErrorCode.
const (
	Conflict             ErrorCode = "conflict"
	EmptyValue           ErrorCode = "empty value"
	Forbidden            ErrorCode = "forbidden"
	InternalError        ErrorCode = "internal error"
	Invalid              ErrorCode = "invalid"
	MethodNotAllowed     ErrorCode = "method not allowed"
	NotFound             ErrorCode = "not found"
	NotImplemented       ErrorCode = "not implemented"
	RequestTooLarge      ErrorCode = "request too large"
	TooManyRequests      ErrorCode = "too many requests"
	Unauthorized         ErrorCode = "unauthorized"
	Unavailable          ErrorCode = "unavailable"
	UnprocessableEntity  ErrorCode = "unprocessable entity"
	UnsupportedMediaType ErrorCode = "unsupported media type"
)

// Defines values for FieldType.
const (
	FieldTypeField    FieldType = "field"
	FieldTypeFunc     FieldType = "func"
	FieldTypeInteger  FieldType = "integer"
	FieldTypeNumber   FieldType = "number"
	FieldTypeRegex    FieldType = "regex"
	FieldTypeWildcard FieldType = "wildcard"
)

// Defines values for HealthCheckStatus.
const (
	Fail HealthCheckStatus = "fail"
	Pass HealthCheckStatus = "pass"
)

// Defines values for LegacyAuthorizationPostRequestStatus.
const (
	Active   LegacyAuthorizationPostRequestStatus = "active"
	Inactive LegacyAuthorizationPostRequestStatus = "inactive"
)

// Defines values for PermissionAction.
const (
	Read  PermissionAction = "read"
	Write PermissionAction = "write"
)

// Defines values for ResourceType.
const (
	Annotations           ResourceType = "annotations"
	Authorizations        ResourceType = "authorizations"
	Buckets               ResourceType = "buckets"
	Checks                ResourceType = "checks"
	Dashboards            ResourceType = "dashboards"
	Dbrp                  ResourceType = "dbrp"
	Documents             ResourceType = "documents"
	Flows                 ResourceType = "flows"
	Functions             ResourceType = "functions"
	Instance              ResourceType = "instance"
	Labels                ResourceType = "labels"
	Notebooks             ResourceType = "notebooks"
	NotificationEndpoints ResourceType = "notificationEndpoints"
	NotificationRules     ResourceType = "notificationRules"
	Orgs                  ResourceType = "orgs"
	Remotes               ResourceType = "remotes"
	Replications          ResourceType = "replications"
	Scrapers              ResourceType = "scrapers"
	Secrets               ResourceType = "secrets"
	Sources               ResourceType = "sources"
	Subscriptions         ResourceType = "subscriptions"
	Tasks                 ResourceType = "tasks"
	Telegrafs             ResourceType = "telegrafs"
	Users                 ResourceType = "users"
	Variables             ResourceType = "variables"
	Views                 ResourceType = "views"
)

// Authorization defines model for Authorization.
type Authorization struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Description A description of the token.
	Description *string `json:"description,omitempty"`

	// Id The authorization ID.
	Id    *string `json:"id,omitempty"`
	Links *struct {
		// Self URI of resource.
		Self *Link `json:"self,omitempty"`

		// User URI of resource.
		User *Link `json:"user,omitempty"`
	} `json:"links,omitempty"`

	// Org The organization name.
	// Specifies the [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization)
	// that the token is scoped to.
	Org *string `json:"org,omitempty"`

	// OrgID The organization ID.
	// Specifies the [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization) that the authorization is scoped to.
	OrgID *string `json:"orgID,omitempty"`

	// Permissions The list of permissions.
	// An authorization must have at least one permission.
	Permissions *[]Permission `json:"permissions,omitempty"`

	// Status Status of the token. If `inactive`, InfluxDB rejects requests that use the token.
	Status *AuthorizationStatus `json:"status,omitempty"`

	// Token The API token.
	// The token value is unique to the authorization.
	// [API tokens]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#token) are
	// used to authenticate and authorize InfluxDB API requests and `influx`
	// CLI commands--after receiving the request, InfluxDB checks that the
	// token is valid and that the `permissions` allow the requested action(s).
	Token     *string    `json:"token,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// User The user name.
	// Specifies the [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user) that owns the authorization.
	// If the authorization is _scoped_ to a user, the user;
	// otherwise, the creator of the authorization.
	User *string `json:"user,omitempty"`

	// UserID The user ID. Specifies the [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user) that owns the authorization. If _scoped_, the user that the authorization is scoped to; otherwise, the creator of the authorization.
	UserID *string `json:"userID,omitempty"`
}

// AuthorizationStatus Status of the token. If `inactive`, InfluxDB rejects requests that use the token.
type AuthorizationStatus string

// AuthorizationUpdateRequest defines model for AuthorizationUpdateRequest.
type AuthorizationUpdateRequest struct {
	// Description A description of the token.
	Description *string `json:"description,omitempty"`

	// Status Status of the token. If `inactive`, InfluxDB rejects requests that use the token.
	Status *AuthorizationUpdateRequestStatus `json:"status,omitempty"`
}

// AuthorizationUpdateRequestStatus Status of the token. If `inactive`, InfluxDB rejects requests that use the token.
type AuthorizationUpdateRequestStatus string

// Error defines model for Error.
type Error struct {
	// Code code is the machine-readable error code.
	Code *ErrorCode `json:"code,omitempty"`

	// Err Stack of errors that occurred during processing of the request. Useful for debugging.
	Err *string `json:"err,omitempty"`

	// Message Human-readable message.
	Message *string `json:"message,omitempty"`

	// Op Describes the logical code operation when the error occurred. Useful for debugging.
	Op *string `json:"op,omitempty"`
}

// ErrorCode code is the machine-readable error code.
type ErrorCode string

// Field defines model for Field.
type Field struct {
	// Alias Alias overrides the field name in the returned response.  Applies only if type is `func`
	Alias *string `json:"alias,omitempty"`

	// Args Args are the arguments to the function
	Args *[]Field `json:"args,omitempty"`

	// Type `type` describes the field type. `func` is a function. `field` is a field reference.
	Type *FieldType `json:"type,omitempty"`

	// Value value is the value of the field.  Meaning of the value is implied by the `type` key
	Value *string `json:"value,omitempty"`
}

// FieldType `type` describes the field type. `func` is a function. `field` is a field reference.
type FieldType string

// HealthCheck defines model for HealthCheck.
type HealthCheck struct {
	Checks  *[]HealthCheck    `json:"checks,omitempty"`
	Commit  *string           `json:"commit,omitempty"`
	Message *string           `json:"message,omitempty"`
	Name    string            `json:"name"`
	Status  HealthCheckStatus `json:"status"`
	Version *string           `json:"version,omitempty"`
}

// HealthCheckStatus defines model for HealthCheck.Status.
type HealthCheckStatus string

// LegacyAuthorizationPostRequest defines model for LegacyAuthorizationPostRequest.
type LegacyAuthorizationPostRequest struct {
	// Description A description of the token.
	Description *string `json:"description,omitempty"`

	// OrgID The organization ID. Identifies the organization that the authorization is scoped to.
	OrgID *string `json:"orgID,omitempty"`

	// Permissions The list of permissions that provide `read` and `write` access to organization resources.
	// An authorization must contain at least one permission.
	Permissions *[]Permission `json:"permissions,omitempty"`

	// Status Status of the token. If `inactive`, InfluxDB rejects requests that use the token.
	Status *LegacyAuthorizationPostRequestStatus `json:"status,omitempty"`

	// Token The name that you provide for the authorization.
	Token *string `json:"token,omitempty"`

	// UserID The user ID. Identifies the user that the authorization is scoped to.
	UserID *string `json:"userID,omitempty"`
}

// LegacyAuthorizationPostRequestStatus Status of the token. If `inactive`, InfluxDB rejects requests that use the token.
type LegacyAuthorizationPostRequestStatus string

// Link URI of resource.
type Link = string

// Links URI pointers for additional paged results.
type Links struct {
	// Next URI of resource.
	Next *Link `json:"next,omitempty"`

	// Prev URI of resource.
	Prev *Link `json:"prev,omitempty"`

	// Self URI of resource.
	Self *Link `json:"self,omitempty"`
}

// Permission defines model for Permission.
type Permission struct {
	Action   PermissionAction `json:"action"`
	Resource Resource         `json:"resource"`
}

// PermissionAction defines model for Permission.Action.
type PermissionAction string

// Resource defines model for Resource.
type Resource struct {
	// Id A resource ID.
	// Identifies a specific resource.
	Id *string `json:"id,omitempty"`

	// Name The name of the resource.
	// _Note: not all resource types have a `name` property_.
	Name *string `json:"name,omitempty"`

	// Org An organization name.
	// The organization that owns the resource.
	Org *string `json:"org,omitempty"`

	// OrgID An organization ID.
	// Identifies the organization that owns the resource.
	OrgID *string `json:"orgID,omitempty"`

	// Type A resource type.
	// Identifies the API resource's type (or _kind_).
	Type ResourceType `json:"type"`
}

// ResourceType A resource type.
// Identifies the API resource's type (or _kind_).
type ResourceType string

// TraceSpan defines model for TraceSpan.
type TraceSpan = string

// ServerError defines model for ServerError.
type ServerError = Error

// GetLegacyAuthorizationsParams defines parameters for GetLegacyAuthorizations.
type GetLegacyAuthorizationsParams struct {
	// UserID A user ID.
	// Only returns legacy authorizations scoped to the specified [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).
	UserID *string `form:"userID,omitempty" json:"userID,omitempty"`

	// User A user name.
	// Only returns legacy authorizations scoped to the specified [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// OrgID An organization ID.
	// Only returns legacy authorizations that belong to the specified [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization).
	OrgID *string `form:"orgID,omitempty" json:"orgID,omitempty"`

	// Org An organization name.
	// Only returns legacy authorizations that belong to the specified [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization).
	Org *string `form:"org,omitempty" json:"org,omitempty"`

	// Token An authorization name token.
	// Only returns legacy authorizations with the specified name.
	Token *string `form:"token,omitempty" json:"token,omitempty"`

	// AuthID An authorization ID.
	// Returns the specified legacy authorization.
	AuthID *string `form:"authID,omitempty" json:"authID,omitempty"`

	// ZapTraceSpan OpenTracing span context
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostLegacyAuthorizationsParams defines parameters for PostLegacyAuthorizations.
type PostLegacyAuthorizationsParams struct {
	// ZapTraceSpan OpenTracing span context
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteLegacyAuthorizationsIDParams defines parameters for DeleteLegacyAuthorizationsID.
type DeleteLegacyAuthorizationsIDParams struct {
	// ZapTraceSpan OpenTracing span context
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetLegacyAuthorizationsIDParams defines parameters for GetLegacyAuthorizationsID.
type GetLegacyAuthorizationsIDParams struct {
	// ZapTraceSpan OpenTracing span context
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PatchLegacyAuthorizationsIDParams defines parameters for PatchLegacyAuthorizationsID.
type PatchLegacyAuthorizationsIDParams struct {
	// ZapTraceSpan OpenTracing span context
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostLegacyAuthorizationsIDPasswordJSONBody defines parameters for PostLegacyAuthorizationsIDPassword.
type PostLegacyAuthorizationsIDPasswordJSONBody struct {
	Password string `json:"password"`
}

// PostLegacyAuthorizationsIDPasswordParams defines parameters for PostLegacyAuthorizationsIDPassword.
type PostLegacyAuthorizationsIDPasswordParams struct {
	// ZapTraceSpan OpenTracing span context
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostLegacyAuthorizationsJSONRequestBody defines body for PostLegacyAuthorizations for application/json ContentType.
type PostLegacyAuthorizationsJSONRequestBody = LegacyAuthorizationPostRequest

// PatchLegacyAuthorizationsIDJSONRequestBody defines body for PatchLegacyAuthorizationsID for application/json ContentType.
type PatchLegacyAuthorizationsIDJSONRequestBody = AuthorizationUpdateRequest

// PostLegacyAuthorizationsIDPasswordJSONRequestBody defines body for PostLegacyAuthorizationsIDPassword for application/json ContentType.
type PostLegacyAuthorizationsIDPasswordJSONRequestBody PostLegacyAuthorizationsIDPasswordJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetLegacyAuthorizations request
	GetLegacyAuthorizations(ctx context.Context, params *GetLegacyAuthorizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegacyAuthorizationsWithBody request with any body
	PostLegacyAuthorizationsWithBody(ctx context.Context, params *PostLegacyAuthorizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegacyAuthorizations(ctx context.Context, params *PostLegacyAuthorizationsParams, body PostLegacyAuthorizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLegacyAuthorizationsID request
	DeleteLegacyAuthorizationsID(ctx context.Context, authID string, params *DeleteLegacyAuthorizationsIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegacyAuthorizationsID request
	GetLegacyAuthorizationsID(ctx context.Context, authID string, params *GetLegacyAuthorizationsIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLegacyAuthorizationsIDWithBody request with any body
	PatchLegacyAuthorizationsIDWithBody(ctx context.Context, authID string, params *PatchLegacyAuthorizationsIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLegacyAuthorizationsID(ctx context.Context, authID string, params *PatchLegacyAuthorizationsIDParams, body PatchLegacyAuthorizationsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLegacyAuthorizationsIDPasswordWithBody request with any body
	PostLegacyAuthorizationsIDPasswordWithBody(ctx context.Context, authID string, params *PostLegacyAuthorizationsIDPasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLegacyAuthorizationsIDPassword(ctx context.Context, authID string, params *PostLegacyAuthorizationsIDPasswordParams, body PostLegacyAuthorizationsIDPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetLegacyAuthorizations(ctx context.Context, params *GetLegacyAuthorizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegacyAuthorizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegacyAuthorizationsWithBody(ctx context.Context, params *PostLegacyAuthorizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegacyAuthorizationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegacyAuthorizations(ctx context.Context, params *PostLegacyAuthorizationsParams, body PostLegacyAuthorizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegacyAuthorizationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLegacyAuthorizationsID(ctx context.Context, authID string, params *DeleteLegacyAuthorizationsIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLegacyAuthorizationsIDRequest(c.Server, authID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegacyAuthorizationsID(ctx context.Context, authID string, params *GetLegacyAuthorizationsIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegacyAuthorizationsIDRequest(c.Server, authID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegacyAuthorizationsIDWithBody(ctx context.Context, authID string, params *PatchLegacyAuthorizationsIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegacyAuthorizationsIDRequestWithBody(c.Server, authID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLegacyAuthorizationsID(ctx context.Context, authID string, params *PatchLegacyAuthorizationsIDParams, body PatchLegacyAuthorizationsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLegacyAuthorizationsIDRequest(c.Server, authID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegacyAuthorizationsIDPasswordWithBody(ctx context.Context, authID string, params *PostLegacyAuthorizationsIDPasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegacyAuthorizationsIDPasswordRequestWithBody(c.Server, authID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLegacyAuthorizationsIDPassword(ctx context.Context, authID string, params *PostLegacyAuthorizationsIDPasswordParams, body PostLegacyAuthorizationsIDPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLegacyAuthorizationsIDPasswordRequest(c.Server, authID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetLegacyAuthorizationsRequest generates requests for GetLegacyAuthorizations
func NewGetLegacyAuthorizationsRequest(server string, params *GetLegacyAuthorizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legacy/authorizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userID", runtime.ParamLocationQuery, *params.UserID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrgID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgID", runtime.ParamLocationQuery, *params.OrgID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Org != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "org", runtime.ParamLocationQuery, *params.Org); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authID", runtime.ParamLocationQuery, *params.AuthID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ZapTraceSpan != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, *params.ZapTraceSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Zap-Trace-Span", headerParam0)
		}

	}

	return req, nil
}

// NewPostLegacyAuthorizationsRequest calls the generic PostLegacyAuthorizations builder with application/json body
func NewPostLegacyAuthorizationsRequest(server string, params *PostLegacyAuthorizationsParams, body PostLegacyAuthorizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegacyAuthorizationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostLegacyAuthorizationsRequestWithBody generates requests for PostLegacyAuthorizations with any type of body
func NewPostLegacyAuthorizationsRequestWithBody(server string, params *PostLegacyAuthorizationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legacy/authorizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ZapTraceSpan != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, *params.ZapTraceSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Zap-Trace-Span", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteLegacyAuthorizationsIDRequest generates requests for DeleteLegacyAuthorizationsID
func NewDeleteLegacyAuthorizationsIDRequest(server string, authID string, params *DeleteLegacyAuthorizationsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authID", runtime.ParamLocationPath, authID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legacy/authorizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ZapTraceSpan != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, *params.ZapTraceSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Zap-Trace-Span", headerParam0)
		}

	}

	return req, nil
}

// NewGetLegacyAuthorizationsIDRequest generates requests for GetLegacyAuthorizationsID
func NewGetLegacyAuthorizationsIDRequest(server string, authID string, params *GetLegacyAuthorizationsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authID", runtime.ParamLocationPath, authID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legacy/authorizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ZapTraceSpan != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, *params.ZapTraceSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Zap-Trace-Span", headerParam0)
		}

	}

	return req, nil
}

// NewPatchLegacyAuthorizationsIDRequest calls the generic PatchLegacyAuthorizationsID builder with application/json body
func NewPatchLegacyAuthorizationsIDRequest(server string, authID string, params *PatchLegacyAuthorizationsIDParams, body PatchLegacyAuthorizationsIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLegacyAuthorizationsIDRequestWithBody(server, authID, params, "application/json", bodyReader)
}

// NewPatchLegacyAuthorizationsIDRequestWithBody generates requests for PatchLegacyAuthorizationsID with any type of body
func NewPatchLegacyAuthorizationsIDRequestWithBody(server string, authID string, params *PatchLegacyAuthorizationsIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authID", runtime.ParamLocationPath, authID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legacy/authorizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ZapTraceSpan != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, *params.ZapTraceSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Zap-Trace-Span", headerParam0)
		}

	}

	return req, nil
}

// NewPostLegacyAuthorizationsIDPasswordRequest calls the generic PostLegacyAuthorizationsIDPassword builder with application/json body
func NewPostLegacyAuthorizationsIDPasswordRequest(server string, authID string, params *PostLegacyAuthorizationsIDPasswordParams, body PostLegacyAuthorizationsIDPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLegacyAuthorizationsIDPasswordRequestWithBody(server, authID, params, "application/json", bodyReader)
}

// NewPostLegacyAuthorizationsIDPasswordRequestWithBody generates requests for PostLegacyAuthorizationsIDPassword with any type of body
func NewPostLegacyAuthorizationsIDPasswordRequestWithBody(server string, authID string, params *PostLegacyAuthorizationsIDPasswordParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authID", runtime.ParamLocationPath, authID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legacy/authorizations/%s/password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ZapTraceSpan != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, *params.ZapTraceSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Zap-Trace-Span", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetLegacyAuthorizationsWithResponse request
	GetLegacyAuthorizationsWithResponse(ctx context.Context, params *GetLegacyAuthorizationsParams, reqEditors ...RequestEditorFn) (*GetLegacyAuthorizationsResponse, error)

	// PostLegacyAuthorizationsWithBodyWithResponse request with any body
	PostLegacyAuthorizationsWithBodyWithResponse(ctx context.Context, params *PostLegacyAuthorizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegacyAuthorizationsResponse, error)

	PostLegacyAuthorizationsWithResponse(ctx context.Context, params *PostLegacyAuthorizationsParams, body PostLegacyAuthorizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegacyAuthorizationsResponse, error)

	// DeleteLegacyAuthorizationsIDWithResponse request
	DeleteLegacyAuthorizationsIDWithResponse(ctx context.Context, authID string, params *DeleteLegacyAuthorizationsIDParams, reqEditors ...RequestEditorFn) (*DeleteLegacyAuthorizationsIDResponse, error)

	// GetLegacyAuthorizationsIDWithResponse request
	GetLegacyAuthorizationsIDWithResponse(ctx context.Context, authID string, params *GetLegacyAuthorizationsIDParams, reqEditors ...RequestEditorFn) (*GetLegacyAuthorizationsIDResponse, error)

	// PatchLegacyAuthorizationsIDWithBodyWithResponse request with any body
	PatchLegacyAuthorizationsIDWithBodyWithResponse(ctx context.Context, authID string, params *PatchLegacyAuthorizationsIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegacyAuthorizationsIDResponse, error)

	PatchLegacyAuthorizationsIDWithResponse(ctx context.Context, authID string, params *PatchLegacyAuthorizationsIDParams, body PatchLegacyAuthorizationsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegacyAuthorizationsIDResponse, error)

	// PostLegacyAuthorizationsIDPasswordWithBodyWithResponse request with any body
	PostLegacyAuthorizationsIDPasswordWithBodyWithResponse(ctx context.Context, authID string, params *PostLegacyAuthorizationsIDPasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegacyAuthorizationsIDPasswordResponse, error)

	PostLegacyAuthorizationsIDPasswordWithResponse(ctx context.Context, authID string, params *PostLegacyAuthorizationsIDPasswordParams, body PostLegacyAuthorizationsIDPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegacyAuthorizationsIDPasswordResponse, error)
}

type GetLegacyAuthorizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Authorizations *[]Authorization `json:"authorizations,omitempty"`

		// Links URI pointers for additional paged results.
		Links *Links `json:"links,omitempty"`
	}
	JSONDefault *ServerError
}

// Status returns HTTPResponse.Status
func (r GetLegacyAuthorizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegacyAuthorizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegacyAuthorizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Authorization
	JSON400      *ServerError
	JSON401      *struct {
		// Code The HTTP status code description. Default is `unauthorized`.
		Code *string `json:"code,omitempty"`

		// Message A human-readable message that may contain detail about the error.
		Message *string `json:"message,omitempty"`
	}
	JSONDefault *ServerError
}

// Status returns HTTPResponse.Status
func (r PostLegacyAuthorizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegacyAuthorizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLegacyAuthorizationsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteLegacyAuthorizationsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLegacyAuthorizationsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLegacyAuthorizationsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Authorization
	JSONDefault  *ServerError
}

// Status returns HTTPResponse.Status
func (r GetLegacyAuthorizationsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegacyAuthorizationsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLegacyAuthorizationsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Authorization
	JSONDefault  *ServerError
}

// Status returns HTTPResponse.Status
func (r PatchLegacyAuthorizationsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLegacyAuthorizationsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLegacyAuthorizationsIDPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ServerError
}

// Status returns HTTPResponse.Status
func (r PostLegacyAuthorizationsIDPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLegacyAuthorizationsIDPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetLegacyAuthorizationsWithResponse request returning *GetLegacyAuthorizationsResponse
func (c *ClientWithResponses) GetLegacyAuthorizationsWithResponse(ctx context.Context, params *GetLegacyAuthorizationsParams, reqEditors ...RequestEditorFn) (*GetLegacyAuthorizationsResponse, error) {
	rsp, err := c.GetLegacyAuthorizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegacyAuthorizationsResponse(rsp)
}

// PostLegacyAuthorizationsWithBodyWithResponse request with arbitrary body returning *PostLegacyAuthorizationsResponse
func (c *ClientWithResponses) PostLegacyAuthorizationsWithBodyWithResponse(ctx context.Context, params *PostLegacyAuthorizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegacyAuthorizationsResponse, error) {
	rsp, err := c.PostLegacyAuthorizationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegacyAuthorizationsResponse(rsp)
}

func (c *ClientWithResponses) PostLegacyAuthorizationsWithResponse(ctx context.Context, params *PostLegacyAuthorizationsParams, body PostLegacyAuthorizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegacyAuthorizationsResponse, error) {
	rsp, err := c.PostLegacyAuthorizations(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegacyAuthorizationsResponse(rsp)
}

// DeleteLegacyAuthorizationsIDWithResponse request returning *DeleteLegacyAuthorizationsIDResponse
func (c *ClientWithResponses) DeleteLegacyAuthorizationsIDWithResponse(ctx context.Context, authID string, params *DeleteLegacyAuthorizationsIDParams, reqEditors ...RequestEditorFn) (*DeleteLegacyAuthorizationsIDResponse, error) {
	rsp, err := c.DeleteLegacyAuthorizationsID(ctx, authID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLegacyAuthorizationsIDResponse(rsp)
}

// GetLegacyAuthorizationsIDWithResponse request returning *GetLegacyAuthorizationsIDResponse
func (c *ClientWithResponses) GetLegacyAuthorizationsIDWithResponse(ctx context.Context, authID string, params *GetLegacyAuthorizationsIDParams, reqEditors ...RequestEditorFn) (*GetLegacyAuthorizationsIDResponse, error) {
	rsp, err := c.GetLegacyAuthorizationsID(ctx, authID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLegacyAuthorizationsIDResponse(rsp)
}

// PatchLegacyAuthorizationsIDWithBodyWithResponse request with arbitrary body returning *PatchLegacyAuthorizationsIDResponse
func (c *ClientWithResponses) PatchLegacyAuthorizationsIDWithBodyWithResponse(ctx context.Context, authID string, params *PatchLegacyAuthorizationsIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLegacyAuthorizationsIDResponse, error) {
	rsp, err := c.PatchLegacyAuthorizationsIDWithBody(ctx, authID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegacyAuthorizationsIDResponse(rsp)
}

func (c *ClientWithResponses) PatchLegacyAuthorizationsIDWithResponse(ctx context.Context, authID string, params *PatchLegacyAuthorizationsIDParams, body PatchLegacyAuthorizationsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLegacyAuthorizationsIDResponse, error) {
	rsp, err := c.PatchLegacyAuthorizationsID(ctx, authID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLegacyAuthorizationsIDResponse(rsp)
}

// PostLegacyAuthorizationsIDPasswordWithBodyWithResponse request with arbitrary body returning *PostLegacyAuthorizationsIDPasswordResponse
func (c *ClientWithResponses) PostLegacyAuthorizationsIDPasswordWithBodyWithResponse(ctx context.Context, authID string, params *PostLegacyAuthorizationsIDPasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLegacyAuthorizationsIDPasswordResponse, error) {
	rsp, err := c.PostLegacyAuthorizationsIDPasswordWithBody(ctx, authID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegacyAuthorizationsIDPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostLegacyAuthorizationsIDPasswordWithResponse(ctx context.Context, authID string, params *PostLegacyAuthorizationsIDPasswordParams, body PostLegacyAuthorizationsIDPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLegacyAuthorizationsIDPasswordResponse, error) {
	rsp, err := c.PostLegacyAuthorizationsIDPassword(ctx, authID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLegacyAuthorizationsIDPasswordResponse(rsp)
}

// ParseGetLegacyAuthorizationsResponse parses an HTTP response from a GetLegacyAuthorizationsWithResponse call
func ParseGetLegacyAuthorizationsResponse(rsp *http.Response) (*GetLegacyAuthorizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegacyAuthorizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Authorizations *[]Authorization `json:"authorizations,omitempty"`

			// Links URI pointers for additional paged results.
			Links *Links `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostLegacyAuthorizationsResponse parses an HTTP response from a PostLegacyAuthorizationsWithResponse call
func ParsePostLegacyAuthorizationsResponse(rsp *http.Response) (*PostLegacyAuthorizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegacyAuthorizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Authorization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Code The HTTP status code description. Default is `unauthorized`.
			Code *string `json:"code,omitempty"`

			// Message A human-readable message that may contain detail about the error.
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteLegacyAuthorizationsIDResponse parses an HTTP response from a DeleteLegacyAuthorizationsIDWithResponse call
func ParseDeleteLegacyAuthorizationsIDResponse(rsp *http.Response) (*DeleteLegacyAuthorizationsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLegacyAuthorizationsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLegacyAuthorizationsIDResponse parses an HTTP response from a GetLegacyAuthorizationsIDWithResponse call
func ParseGetLegacyAuthorizationsIDResponse(rsp *http.Response) (*GetLegacyAuthorizationsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLegacyAuthorizationsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Authorization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchLegacyAuthorizationsIDResponse parses an HTTP response from a PatchLegacyAuthorizationsIDWithResponse call
func ParsePatchLegacyAuthorizationsIDResponse(rsp *http.Response) (*PatchLegacyAuthorizationsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLegacyAuthorizationsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Authorization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostLegacyAuthorizationsIDPasswordResponse parses an HTTP response from a PostLegacyAuthorizationsIDPasswordWithResponse call
func ParsePostLegacyAuthorizationsIDPasswordResponse(rsp *http.Response) (*PostLegacyAuthorizationsIDPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLegacyAuthorizationsIDPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all legacy authorizations
	// (GET /legacy/authorizations)
	GetLegacyAuthorizations(ctx echo.Context, params GetLegacyAuthorizationsParams) error
	// Create a legacy authorization
	// (POST /legacy/authorizations)
	PostLegacyAuthorizations(ctx echo.Context, params PostLegacyAuthorizationsParams) error
	// Delete a legacy authorization
	// (DELETE /legacy/authorizations/{authID})
	DeleteLegacyAuthorizationsID(ctx echo.Context, authID string, params DeleteLegacyAuthorizationsIDParams) error
	// Retrieve a legacy authorization
	// (GET /legacy/authorizations/{authID})
	GetLegacyAuthorizationsID(ctx echo.Context, authID string, params GetLegacyAuthorizationsIDParams) error
	// Update a legacy authorization to be active or inactive
	// (PATCH /legacy/authorizations/{authID})
	PatchLegacyAuthorizationsID(ctx echo.Context, authID string, params PatchLegacyAuthorizationsIDParams) error
	// Set a legacy authorization password
	// (POST /legacy/authorizations/{authID}/password)
	PostLegacyAuthorizationsIDPassword(ctx echo.Context, authID string, params PostLegacyAuthorizationsIDPasswordParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLegacyAuthorizations converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegacyAuthorizations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegacyAuthorizationsParams
	// ------------- Optional query parameter "userID" -------------

	err = runtime.BindQueryParameter("form", true, false, "userID", ctx.QueryParams(), &params.UserID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", ctx.QueryParams(), &params.User)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user: %s", err))
	}

	// ------------- Optional query parameter "orgID" -------------

	err = runtime.BindQueryParameter("form", true, false, "orgID", ctx.QueryParams(), &params.OrgID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgID: %s", err))
	}

	// ------------- Optional query parameter "org" -------------

	err = runtime.BindQueryParameter("form", true, false, "org", ctx.QueryParams(), &params.Org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// ------------- Optional query parameter "authID" -------------

	err = runtime.BindQueryParameter("form", true, false, "authID", ctx.QueryParams(), &params.AuthID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authID: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Zap-Trace-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Zap-Trace-Span")]; found {
		var ZapTraceSpan TraceSpan
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Zap-Trace-Span, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, valueList[0], &ZapTraceSpan)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Zap-Trace-Span: %s", err))
		}

		params.ZapTraceSpan = &ZapTraceSpan
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegacyAuthorizations(ctx, params)
	return err
}

// PostLegacyAuthorizations converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegacyAuthorizations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegacyAuthorizationsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Zap-Trace-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Zap-Trace-Span")]; found {
		var ZapTraceSpan TraceSpan
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Zap-Trace-Span, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, valueList[0], &ZapTraceSpan)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Zap-Trace-Span: %s", err))
		}

		params.ZapTraceSpan = &ZapTraceSpan
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegacyAuthorizations(ctx, params)
	return err
}

// DeleteLegacyAuthorizationsID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLegacyAuthorizationsID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authID" -------------
	var authID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "authID", runtime.ParamLocationPath, ctx.Param("authID"), &authID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteLegacyAuthorizationsIDParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Zap-Trace-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Zap-Trace-Span")]; found {
		var ZapTraceSpan TraceSpan
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Zap-Trace-Span, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, valueList[0], &ZapTraceSpan)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Zap-Trace-Span: %s", err))
		}

		params.ZapTraceSpan = &ZapTraceSpan
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLegacyAuthorizationsID(ctx, authID, params)
	return err
}

// GetLegacyAuthorizationsID converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegacyAuthorizationsID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authID" -------------
	var authID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "authID", runtime.ParamLocationPath, ctx.Param("authID"), &authID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLegacyAuthorizationsIDParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Zap-Trace-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Zap-Trace-Span")]; found {
		var ZapTraceSpan TraceSpan
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Zap-Trace-Span, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, valueList[0], &ZapTraceSpan)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Zap-Trace-Span: %s", err))
		}

		params.ZapTraceSpan = &ZapTraceSpan
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegacyAuthorizationsID(ctx, authID, params)
	return err
}

// PatchLegacyAuthorizationsID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchLegacyAuthorizationsID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authID" -------------
	var authID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "authID", runtime.ParamLocationPath, ctx.Param("authID"), &authID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchLegacyAuthorizationsIDParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Zap-Trace-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Zap-Trace-Span")]; found {
		var ZapTraceSpan TraceSpan
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Zap-Trace-Span, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, valueList[0], &ZapTraceSpan)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Zap-Trace-Span: %s", err))
		}

		params.ZapTraceSpan = &ZapTraceSpan
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchLegacyAuthorizationsID(ctx, authID, params)
	return err
}

// PostLegacyAuthorizationsIDPassword converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegacyAuthorizationsIDPassword(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authID" -------------
	var authID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "authID", runtime.ParamLocationPath, ctx.Param("authID"), &authID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLegacyAuthorizationsIDPasswordParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Zap-Trace-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Zap-Trace-Span")]; found {
		var ZapTraceSpan TraceSpan
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Zap-Trace-Span, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Zap-Trace-Span", runtime.ParamLocationHeader, valueList[0], &ZapTraceSpan)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Zap-Trace-Span: %s", err))
		}

		params.ZapTraceSpan = &ZapTraceSpan
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegacyAuthorizationsIDPassword(ctx, authID, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/legacy/authorizations", wrapper.GetLegacyAuthorizations)
	router.POST(baseURL+"/legacy/authorizations", wrapper.PostLegacyAuthorizations)
	router.DELETE(baseURL+"/legacy/authorizations/:authID", wrapper.DeleteLegacyAuthorizationsID)
	router.GET(baseURL+"/legacy/authorizations/:authID", wrapper.GetLegacyAuthorizationsID)
	router.PATCH(baseURL+"/legacy/authorizations/:authID", wrapper.PatchLegacyAuthorizationsID)
	router.POST(baseURL+"/legacy/authorizations/:authID/password", wrapper.PostLegacyAuthorizationsIDPassword)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
